#### WGBS analysis pipeline

**** DO NOT DECOMPRESS WGBS FASTQ FILES â€” THEY ARE *HUGE*

TL/DR
Step 1: abismal index
Step 2: fastp, abismal alignment, format reads, sort .bam, rm duplicates, bsrate, methcounts, symmetric CpG, sort .meth
Step 3: merge all files of one group (e.g., all young samples collapsed into one "young" group)
Step 4: HMR
Step 5: methdiff
Step 6: DMRs for small methylomes (this works for most basic analyses)
Step 7: Differential menthylation btwn large methylomes (starts at #11)
--------------------------------------------------------------
#1: Build your abismal index

    Similar to bowtie and STAR, abismal is an aligner that needs you to build an index/library for it to reference.
    
    Build:
        abismalidx <genome folder or file> <index file>

#2   QC and trimming (fastp) & map with abismal
        abismal -i <index> -o <output SAM> [options] <input fastq 1> <input fastq 2>


#3: Before you can merge paired-end files, they need to be formatted for MethPipe.

        format_reads -o <outpu_f.sam> -f abismal <outpu.sam>
        
    # "_f" denotes the formatted file


#4: Merge and remove duplicate reads

    First, the files need to be sorted, so the program can identify reads that were mapped to identical genomic locations
    
        samtools sort -O sam -o <outpu_fs.sam> <outpu_f.sam>
        
    # "_fs" = formatted & sorted
        
    
    The duplicate-removal correction should be done on a per-library basis (i.e, one should pool all reads from multiple runs or lanes sequenced from the same library and remove duplicates).
    
        duplicate-remover -S <output_dremove_stat.txt> <outpu_fs.sam> <outpu_fsd.sam>
        
    # "_fsd" = formatted, sorted, & duplicated removed; _f and _fs files can be removed


#5: Estimating bisulfite conversion rate (aka how many unmethylated cytosines are converted to uracil)

    Measuring the bisulfite conversion rate this way requires some kind of control set of genomic cytosines not believed to be methylated. 
    bsrate uses non-CpG cytosines which are believed to be almost completely unmethylated in most mammalian cells.
    
        bsrate -c /path/to/hg38.fa -o <output.bsrate> <output_fsd.sam>

#6: Single loci methylation levels

    The methylation level for every cytosine site at single base resolution is estimated as a probability based on the ratio of methylated to total reads mapped to that loci. 
    Because not all DNA methylation contexts are symmetric, methylation levels are produced for both strands and can be analyzed separately.
    
    methcounts -c /path/to/hg38.fa -o <output.meth> <output_fsd.sam>

#7: Extracting and merging symmetric CpG methylation levels

    Since symmetric methylation level is the common case for CpG methylation, we have designed all of our analysis tools based on symmetric CpG sites, which means each CpG pair generated by methcounts should be merged to one
    * The command below will merge all CpG pairs while throwing out mutated sites. Note that as long as one site of the pair is mutated, the whole pair will be discarded.
    This default mode is recommended.
        
        symmetric-cpgs -o <output_CpG.meth> <output.meth>
        
    Sort the .meth file
    
        sort -T /path/to/file/directory/ \
        -k 1,1 -k 2,2g -k 3,3 \
        <output_CpG.meth> > <output_CpG_sorted.meth>


#8: Merging methcounts files from multiple replicates
    
    The merge-methcounts program is used to merge the those individual methcounts file to produce a single estimate that has higher coverage.
    *** THIS IS OPTIONAL
    
        merge-methcounts <output_R1/R1.meth> <output_R2/R2.meth> <output_R3/R3.meth> -o <merged-output.meth>

#9: Hypomethylated and hypermethylated regions (both are "HMR" unfortunately)

    For calling HMRs in mammalian methylomes, we suggest only considering the methylation level at CpG sites, as the level of non-CpG methylation is not usually more than a few percent

        hmr -o c <merged_output.meth>


#10: Differential methylation

    Comparing a pair of methylomes: Suppose that we want to compare two methylomes: Human ESC.meth and Human NHFF.meth. 
    We start out by calculating the differential methylation score of each CpG site using the methdiff program:

        methdiff -o <outpt_vs_reference.methdiff> <merged_output.meth> <reference_merged_output.meth>

    With differential methylation scores and HMRs for both methylomes available, differentially methylated regions (DMRs) can be calculated with the dmr program. 
    This program uses HMR fragments to compute DMRs.

        dmr <outpt_vs_reference.methdiff> <merged_output.meth> <reference_merged_output.meth> <output_vs_reference.dmr> <reference_vs_output.dmr>


#11: So how do we find out which genes (or TEs) are found within these DMRs?

    bedtools has a "intersect intervals" function, that can find overlapping sections in bed files using genome coordinates.
    Here is the link to the bedtools intersect manual: https://bedtools.readthedocs.io/en/latest/content/tools/intersect.html
    
        bedtools intersect [OPTIONS] -a <FILE> -b <FILE1, FILE2, ..., FILEN>
        
    Now that you have DMRs, you need to find out what genes/transcripts lie within those regions

        There's a lot of different ways to do this, but here I chose to use bedtools Intersect intervals to see where my peaks and TEs overlaps
    
        To do this you need:
        
            1) Your BAM/BED/bedGraph/GFF/VCF/EncodePeak formatted peaks file
            2) A bedfile for your genome --> in this case, I made a bed file using the repeatmasker hg38 TE annotation*
        
                * the repeatmasker bed file is big, so be cautious about opening it.
        
        File A (your dmrs) will be intersected with file B (the genome file), but you have to choose which information is saved as output.
            *File order is arbitrary
            
        I used the following option:
            "Write the original A and B entries plus the number of base pairs of overlap between the two features. 
            Only A features with overlap are reported. Restricted by the fraction- and reciprocal option (-wo)"
        
            This retains your dmr information, while also showing where they intersect and which TEs can be found at the overlapping loci.
        
            bedtools intersect -a <output_vs_reference.dmr> \ 
            -b <reference_genome.bed>\
            -wo > <output_vs_reference_intersect.bed>
